package diet.server.experimentmanager;

import diet.server.ConversationController.ClassLoader.ClassLoad;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Vector;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author sre
 */
public class JClassBrowser extends javax.swing.JPanel {

    
    JExperimentManagerMainFrame jemmf;
    JList publicJLIST1;
    
    
    public JClassBrowser( JExperimentManagerMainFrame jemmf){
        initComponents();
        publicJLIST1 = jList1;
        this.jemmf=jemmf;
        
        Vector v = ClassLoad.getConversationControllers();
        
        
        //v.addElement("listitem2");
        
        jList1.removeAll();
        jList1.setListData(v);
        this.repaint();
        jList1.repaint();
        jList1.addMouseListener(new JClassPopupMenu(this));
        
    }
    
    
    
    /**
     * Creates new form JClassBrowser
     */
    public JClassBrowser() {
        initComponents();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        setPreferredSize(new java.awt.Dimension(400, 150));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        jPanel2.setMaximumSize(new java.awt.Dimension(400, 60));
        jPanel2.setPreferredSize(new java.awt.Dimension(391, 60));
        jPanel2.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 391, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        add(jPanel2);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jList1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents

    private void jList1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseReleased
        // TODO add your handling code here:
        if(evt.getButton() == MouseEvent.BUTTON2 || evt.getButton() == MouseEvent.BUTTON3){
             
        }
        
        
    }//GEN-LAST:event_jList1MouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables





public class JClassPopupMenu extends JPopupMenu implements MouseListener, ActionListener{

   
    
    JClassBrowser jcb;
    
    public JClassPopupMenu(JClassBrowser jcb){
        this.jcb=jcb;
    } 
            
    
    
    
     public void actionPerformed(ActionEvent e) {
        //System.out.println(e.getSource().getClass().toString());
        System.out.println(((JMenuItem)e.getSource()).getText());
        String choice = (((JMenuItem)e.getSource()).getText());
        if(choice.equalsIgnoreCase("Run as new experiment")){
            String oSelected = (String)publicJLIST1.getSelectedValue();
            if(oSelected==null)return;
            jcb.jemmf.expmanUI.runExperiment(oSelected);
        }
        else if(choice.equalsIgnoreCase("Run locally as demo")){
            String oSelected = (String)publicJLIST1.getSelectedValue();
            if(oSelected==null)return;
            jcb.jemmf.expmanUI.runExperimentLocally(oSelected);
        }
        
        //jemmf.expmanUI.expmanager.createAndActivateNewExperiment(((JMenuItem)e.getSource()).getText());
    }

    public void mouseClicked(MouseEvent e) {
        System.out.println("Not supported yet1.");
    }

    public void mouseEntered(MouseEvent e) {
        System.out.println("Not supported yet2.");
    }

    public void mouseExited(MouseEvent e) {
        System.out.println("Not supported yet3.");
    }

    public void mousePressed(MouseEvent e) {
        System.out.println("Not supported yet4.");
         if(e.isPopupTrigger()){
            maybeShowPopup(e);
        }
    }

    public void mouseReleased(MouseEvent e) {      
        if(e.isPopupTrigger()){
            maybeShowPopup(e);
        }
       
        
        
    }

    public void maybeShowPopup(MouseEvent e){
        //System.exit(-3);
        Object o = e.getSource();
        if(o instanceof JList){
            JList jl = (JList)o;
            Object oSelected = (String)jl.getSelectedValue();
            if(oSelected==null)return;
            
                       
            JPopupMenu popup = new JPopupMenu();
            JMenuItem menuItem = new JMenuItem("Run as new experiment");
                       
            menuItem.addActionListener(this);
            popup.add(menuItem);
            menuItem = new JMenuItem("Run locally as demo");
            menuItem.addActionListener(this);
            popup.add(menuItem);
             if (e.isPopupTrigger()) {
            popup.show(e.getComponent(),
                       e.getX(), e.getY());
        }
            
        }
    }
    
}











}



